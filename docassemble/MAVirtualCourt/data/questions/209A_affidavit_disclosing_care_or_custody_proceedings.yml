---
include:
  #- docassemble.MAVirtualCourt:basic-questions.yml  
  - basic-questions.yml
---
objects:
  - other_care_custody_proceedings: OtherProceedingList
  - signing_attorney: VCIndividual
  - children: PeopleList.using(complete_attribute='child_complete')
  - box8_people: PeopleList.using(auto_gather=False, gathered=True) # People named as parties in other care/custody. We'll filter to remove dupes
  - attorneys_for_children: PeopleList
  - gals_investigators: PeopleList
  - attorneys_for_parents: PeopleList
---
code: |
  children[i].address.address
  children[i].previous_addresses.gather()
  children[i].child_complete = True
---
question: |
  Has ${children[i]} lived anywhere else in the last 2 years?
yesno: children[i].previous_addresses.there_are_any  
---
question: |
  Tell us about the ${ordinal(j)} previous address for ${children[i]}
subquestion: |
  You'll have a chance to add more on the next screen
#list collect: True # This breaks when list collect is turned on
fields:
  - Address: children[i].previous_addresses[j].address
    address autocomplete: True
  - Unit:     children[i].previous_addresses[j].unit
    required: False
  - City: children[i].previous_addresses[j].city
  - State: children[i].previous_addresses[j].state
    code: |
      states_list()
    default: "MA"
---
generic object: VCIndividual
code: |
  x.past_addresses_on_one_line = comma_and_list(x.previous_addresses)
  # Below is a typo in the PDF FIXED on 4/24
  # x.past_addresses_on_one_line = comma_and_list(x.previous_addresses)
---
question: |
  Has ${children[i]} lived anywhere else in the last 2 years?
subquestion: |
  So far you have told us about ${comma_and_list(children[i].previous_addresses.elements)}
yesno: children[i].previous_addresses.there_is_another  
---
reconsider: True
code: |
  collected_addresses = [child.address for child in children.elements if defined('child.address.address')] + [user.address for user in users]
---
id: interview_order_A_affidavit_disclosing_care_or_custody_proceedings0009
code: |
  # This is a placeholder to control logic flow in this interview
  # It was generated from interview_generator.py as an 'interview order' type question.  
  basic_questions_intro_screen 
  A_affidavit_disclosing_care_or_custody_proceedings0009_intro
  # Set the preferred/allowed courts for this interview
  preferred_court = interview_metadata["A_affidavit_disclosing_care_or_custody_proceedings0009"]["preferred court"]
  allowed_courts = interview_metadata["A_affidavit_disclosing_care_or_custody_proceedings0009"]["allowed courts"]
  courts.gather()
  str(courts[0])
  fill_in_court_name
  defendants.there_are_any = True  
  case_name
  children.there_are_any = True
  children.gather()  
  # child1_name_last_first
  confidential_address
  for child in children:
    child.address.on_one_line()  
  has_participated_custody_case
  other_care_custody_proceedings.gather()
  if have_pending_cases:
    attorneys_for_parents.gather()
    attorneys_for_children.gather()
    gals_investigators.gather()
  else:
    attorneys_for_children.gathered = True
    attorneys_for_parents.gathered = True
    gals_investigators.gathered = True
  impound_affidavit
  day
  needs_attorney_signature
  docket_numbers[0]
  str(users[0])
  users[0].address.on_one_line()
  str(users[0])  #mark_unfilled_fields_empty(interview_metadata["A_affidavit_disclosing_care_or_custody_proceedings0009"])
  A_affidavit_disclosing_care_or_custody_proceedings0009_preview_question # Pre-canned preview screen
  basic_questions_signature_flow
  users[0].signature
  A_affidavit_disclosing_care_or_custody_proceedings0009 = True
---
code: |
  have_pending_cases = len(other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")) > 0
---
code: |
  case_name = str(plaintiffs) + ' v ' + str(defendants)
---
question: |
  What is the name of the person on the other side of this case?
subquestion: |
  For example: the person you want to be protected from or the person
  you are divorcing.
  
  If you need to list more than one person on this form, you can click
  "Add another".
fields:
  - First name: other_parties[i].name.first
  - Middle: other_parties[i].name.middle
    required: False
  - Last: other_parties[i].name.last
    required: False
  - Suffix: other_parties[i].name.suffix
    code: |
      name_suffix()
    required: False      
list collect: True      
---
if: |
  not defined('preferred_court') or preferred_court != 'Housing Court'
id: court information
sets:
  - courts[0].name
question: |
  What court is your case being heard in?
subquestion: |
  Your case can be heard in these courts: ${comma_and_list(allowed_courts)}.
  You can try finding your local court by using the [Courthouse Locator](https://www.mass.gov/guides/find-a-courthouse-serving-you).
  
  Click ${word("help")} to learn more about choosing a court. This can be complicated in a 209A restraining order.
fields:
  - Court name: courts[0]
    datatype: object
    choices: macourts.filter_courts(allowed_courts)
continue button field: ask_court_question    
help: |
  You can get a 209A restraining order at the District Court near where you live or theProbate and Family Court in your county.  If you live in Boston, you can go to the Boston Municipal Court (BMC) near where you live instead of a District Court. You can also go to the Superior Court in your county.  Most people get 209A restraining orders from District Court, BMC, or Probate and Family Court.  Superior Court restraining orders are rare but may be an option when other available courts are closed due to the COVID-19 crisis. 
  
  If you have moved to another town in Massachusetts since the abuse, you can go to the court where you live now or to the court for an address that you had to leave because of the abuse. 
  
  Some things to think about when you are deciding which court is better for you are:  
  
  #### If the other parent wants to visit your child  
  The District Court is not supposed to order visitation between the other parent and your child as part of a 209A case. The Probate and Family Court can order visitation in a 209A case.  If you want to get visitation settled right away, you might want to go to the Probate and Family Court to file for the 209A restraining order. If you do not want the court to decide about visitation, you might want to go to the District Court for your 209A restraining order. 
  #### If the person who abused you is facing criminal charges  
  If the person who abused you is facing criminal charges related to the domestic violence, you might want to file for your 209A restraining order at the District or Superior Court where that case is. That way, you may be able to work with the same Victim/Witness Advocate for both cases.
  
  Read more at: [https://www.masslegalhelp.org/domestic-violence/where-can-i-get-209a](https://www.masslegalhelp.org/domestic-violence/where-can-i-get-209a)
---
code: |
  if 'District' in courts[0].name:
    courts[0].division_district_court = courts[0].division
  elif 'Superior' in courts[0].name:
    courts[0].division_superior_court = courts[0].division
  elif 'Juvenile' in courts[0].name:
    courts[0].division_juvenile_court = courts[0].division
  elif 'Probate' in courts[0].name:
    courts[0].division_family_court = courts[0].division
  elif 'Municipal' in courts[0].name: 
    courts[0].division_bmc = courts[0].division
  fill_in_court_name = True
---
code: |
  user_role = 'plaintiff'
---
mandatory: True
code: |
  interview_metadata # make sure we initialize the object
  if not defined("interview_metadata['A_affidavit_disclosing_care_or_custody_proceedings0009']"):
    interview_metadata.initializeObject('A_affidavit_disclosing_care_or_custody_proceedings0009')
  interview_metadata['A_affidavit_disclosing_care_or_custody_proceedings0009'].update({
    'title': 'Affidavit Disclosing Care or Custody Proceedings',
    'short title': 'Affidavit of Care',
    'description': 'Complete in 209As with children if required by page 2 of complaint, as well as in various probate proceedings',
    'original_form': 'https://www.mass.gov/files/documents/2017/09/01/ocaj-aff-care-custody.pdf',
    'allowed courts': [
      'Boston Municipal Court',
      'District Court',
      'Juvenile Court',
      'Probate and Family Court',
      'Superior Court',
    ],
    'preferred court': 'Probate and Family Court',
    'categories': [
      'Domestic Violence / Safety of self',
      'Family Law',
    ],
    'logic block variable': 'A_affidavit_disclosing_care_or_custody_proceedings0009',
    'attachment block variable': 'A_affidavit_disclosing_care_or_custody_proceedings0009_attachment',
    'typical role': 'plaintiff',
    'built_in_fields_used': [
      {'variable': 'docket_number',
       'transformed_variable': 'docket_numbers[0]',
      },
      {'variable': 'user_name_full',
       'transformed_variable': 'str(users[0])',
      },
      {'variable': 'child1_address_on_one_line',
       'transformed_variable': 'children[1-1].address.on_one_line()',
      },
      {'variable': 'child2_address_on_one_line',
       'transformed_variable': 'children[2-1].address.on_one_line()',
      },
      {'variable': 'child3_address_on_one_line',
       'transformed_variable': 'children[3-1].address.on_one_line()',
      },
      {'variable': 'user_address_on_one_line',
       'transformed_variable': 'users[0].address.on_one_line()',
      },
      {'variable': 'user_signature',
       'transformed_variable': 'users[0].signature',
      },
      {'variable': 'user_name_full__1',
       'transformed_variable': 'str(users[0])',
      },
      {'variable': 'child1_address_street',
       'transformed_variable': 'children[1-1].address.address',
      },
      {'variable': 'child1_address_city_state_zip',
       'transformed_variable': 'children[1-1].address.line_two()',
      },
      {'variable': 'child2_address_street',
       'transformed_variable': 'children[2-1].address.address',
      },
      {'variable': 'child2_address_city_state_zip',
       'transformed_variable': 'children[2-1].address.line_two()',
      },
      {'variable': 'child3_address_street',
       'transformed_variable': 'children[3-1].address.address',
      },
      {'variable': 'child3_address_city_state_zip',
       'transformed_variable': 'children[3-1].address.line_two()',
      },
      {'variable': 'user_address_on_one_line__2',
       'transformed_variable': 'users[0].address.on_one_line()',
      },
      ],
    'fields': [
      {'variable': 'case_name',
       'transformed_variable': 'case_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_bmc',
       'transformed_variable': 'courts[0].division_bmc',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_district_court',
       'transformed_variable': 'courts[0].division_district_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_juvenile_court',
       'transformed_variable': 'courts[0].division_juvenile_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_family_court',
       'transformed_variable': 'courts[0].division_family_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_superior_court',
       'transformed_variable': 'courts[0].division_superior_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child1_name_last_first',
       'transformed_variable': 'children[1-1].name_last_first',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_name_last_first',
       'transformed_variable': 'children[2-1].name_last_first',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_name_last_first',
       'transformed_variable': 'children[3-1].name_last_first',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'confidential_address',
       'transformed_variable': 'confidential_address',
      'field_type': 'yesno',
      },
      {'variable': 'child1_past_addresses_on_one_line',
       'transformed_variable': 'children[1-1].past_addresses_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_past_addresses_on_one_line',
       'transformed_variable': 'children[2-1].past_addresses_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_past__addresses_on_one_line',
       'transformed_variable': 'children[3-1].past_ addresses_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'has_participated_custody_case',
       'transformed_variable': 'has_participated_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'has_not_participated_custody_case',
       'transformed_variable': 'has_not_participated_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'know_of_other_custody_case',
       'transformed_variable': 'know_of_other_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'do_not_know_of_other_custody_case',
       'transformed_variable': 'do_not_know_of_other_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'other_case_3_user_role',
       'transformed_variable': 'users[0].role_in_custody_case_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_letters',
       'transformed_variable': 'children[1-1].letter_a',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_court',
       'transformed_variable': 'children[1-1].custody_court_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_docket',
       'transformed_variable': 'children[1-1].custody_docket_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_status',
       'transformed_variable': 'children[1-1].custody_case_status',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_user_role',
       'transformed_variable': 'users[0].role_in_custody_case_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_letters',
       'transformed_variable': 'children[2-1].letter_b',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_court',
       'transformed_variable': 'children[2-1].custody_court_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_docket',
       'transformed_variable': 'children[2-1].custody_docket_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_status',
       'transformed_variable': 'children[2-1].custody_case_status',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_user_role',
       'transformed_variable': 'users[0].role_in_custody_case_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_letters',
       'transformed_variable': 'children[3-1].letter_c',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_court',
       'transformed_variable': 'children[3-1].custody_court_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_docket',
       'transformed_variable': 'children[3-1].custody_docket_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_status',
       'transformed_variable': 'children[3-1].custody_case_status',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_1_letters',
       'transformed_variable': 'children[1-1].letter_a',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_1_names',
       'transformed_variable': 'other_parties[0].name_full_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_1_address_on_one_line',
       'transformed_variable': 'other_parties[0].address_on_one_line_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_2_letters',
       'transformed_variable': 'children[2-1].letter_b',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_2_names',
       'transformed_variable': 'other_parties[0].name_full_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_2_address_on_one_line',
       'transformed_variable': 'other_parties[0].address_on_one_line_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_3_names',
       'transformed_variable': 'other_parties[0].name_full_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_3_address_on_one_line',
       'transformed_variable': 'other_parties[0].address_on_one_line_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_letters__1',
       'transformed_variable': 'children[3-1].letter_c',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'impound_affidavit',
       'transformed_variable': 'impound_affidavit',
      'field_type': 'yesno',
      },
      {'variable': 'day',
       'transformed_variable': 'day',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'month',
       'transformed_variable': 'month',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'year',
       'transformed_variable': 'year',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_of_record_address_on_one_line',
       'transformed_variable': 'attorney_of_record_address_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child1_past_addresses_street',
       'transformed_variable': 'children[1-1].past_addresses_street',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child1_past_addresses_city_state_zip',
       'transformed_variable': 'children[1-1].past_addresses_city_state_zip',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_past_addresses_street',
       'transformed_variable': 'children[2-1].past_addresses_street',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_past_addresses_city_state_zip',
       'transformed_variable': 'children[2-1].past_addresses_city_state_zip',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_past_addresses_street',
       'transformed_variable': 'children[3-1].past_addresses_street',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_past_addresses_city_state_zip',
       'transformed_variable': 'children[3-1].past_addresses_city_state_zip',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_children_or_child1__1',
       'transformed_variable': 'attorneys[0].for_children_or_child1',
      'field_type': 'yesno',
      },
      {'variable': 'attorney_for_children_or_child1__2',
       'transformed_variable': 'attorneys[0].for_children_or_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child2_if_different',
       'transformed_variable': 'attorneys[0].for_child2_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child2',
       'transformed_variable': 'attorneys[0].for_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child3_if_different',
       'transformed_variable': 'attorneys[0].for_child3_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child3',
       'transformed_variable': 'attorneys[0].for_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_investigator1',
       'transformed_variable': 'gal_investigator1',
      'field_type': 'yesno',
      },
      {'variable': 'gal_for_child1',
       'transformed_variable': 'gal_for_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_investigator2_if_different',
       'transformed_variable': 'gal_investigator2_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_for_child2',
       'transformed_variable': 'gal_for_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_investigator3_if_different',
       'transformed_variable': 'gal_investigator3_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_for_child3',
       'transformed_variable': 'gal_for_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_mother_name_full__1',
       'transformed_variable': 'attorneys[0].for_mother_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney1_for_mother',
       'transformed_variable': 'attorneys[1-1].for_mother',
      'field_type': 'yesno',
      },
      {'variable': 'attorney2_for_mother',
       'transformed_variable': 'attorneys[2-1].for_mother',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_mother_name_full__2',
       'transformed_variable': 'attorneys[0].for_mother_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_father_name_full',
       'transformed_variable': 'attorneys[0].for_father_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_father',
       'transformed_variable': 'attorneys[0].for_father',
      'field_type': 'yesno',
      },
      {'variable': 'attorney_for_dfc_name_full',
       'transformed_variable': 'attorneys[0].for_dfc_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      ],
  })
---
question: |
  Confidential Address
subquestion: |
  Do you need your address to be kept secret for any of the following reasons?
fields:
  - Check any that are true: confidential_address_reasons
    datatype: checkboxes
    choices:
      - This is a 209A (abuse prevention) order
      - I live in a domestic violence shelter
      - I am in danger of abuse
      - My children are in danger of abuse
      - It should be kept secret for another reason not listed above
---
code: |
  # This checks box 3 on the form
  confidential_address = confidential_address_reasons.any_true()
---
# This should show the address of the plaintiff and each kid, but
# Only if they are unique
question: |
  Where does ${children[i]} live?
fields:
  - An address already mentioned: children[i].address
    datatype: object
    choices: 
      - collected_addresses
      - users[0].address
    object labeler: |
      lambda y: y.on_one_line()
    disable others: True
  - Street address: children[i].address.address
    address autocomplete: True
  - Apartment: children[i].address.unit
    required: False
  - City: children[i].address.city
  - State: children[i].address.state
    code: |
      states_list()
    default: MA
    show if: 
      variable: children[i].address.country
      is: USA
  - Province/State: children[i].address.state
    hide if: 
      variable: children[i].address.country
      is: USA
  - Country: children[i].address.country
    default: USA
      
---
code: |
  # Ask the user if they want the affidavit impounded ONLY if they have an
  # adoption case listed on the form. Otherwise not relevant
  impound_affidavit = False if not other_care_custody_proceedings.includes_adoption() else ask_impound_affidavit
---
question: |
  Privacy of adoption records
subquestion: |
  You said that one of the cases mentioning ${comma_and_list(children,and_string=word("or"))} is an adoption.
  
  You have the right to tell the court to keep this form private so the
  adoption is not a public record.
  
  Would you like to keep this form private?
yesno: ask_impound_affidavit
---
generic object: OtherProceeding
question: |
  Attorneys, Guardians ad Litem, and Investigators
subquestion: |
  The court asks you to name the people involved in any case that is
  still "pending", or not yet decided by a judge or agreement.

  Were there any attorneys, guardians ad litem, or investigators
  involved in this case?
yesno: x.attorneys.there_are_any
# ---
# generic object: OtherProceeding
# question: |
#   Attorneys, Guardians ad Litem, and Investigators
# subquestion: |  
#   Please list the names of each attorney, guardian ad litem, and investigator
#   who is involved in the "${x}" case.
# list collect: True
# fields:
# # An attorney already mentioned
#   - Name: x.attorneys[i].name.first
#   - Role in this case: x.attorneys[i].role
#     choices:
#       - Attorney: attorney
#       - Guardian ad Litem: GAL
#       - Investigator: investigator
#   - Did this person represent your child, or an adult?: x.attorneys[i].represented_child_or_adult
    
#   - Who does this person represent?: x.attorneys[i].represented_parties
#     datatype: checkboxes
#     code: |
#       children + users + other_parties
#     minlength: 1      
---
code: |
  day = ordinal_number(int(signature_date.format('dd')), use_word=False) # https://docassemble.org/docs/functions.html#ordinal_number
  month = signature_date.format('MMMM')
  year = signature_date.format('yy')
---
question: |
  Docket Number
subquestion: |
  If you know the docket number for this case, enter it below
fields:
  - I don't know the docket number: dont_know_docket_number
    datatype: yesno
  - Docket number: docket_numbers[0]
    hide if:  dont_know_docket_number
validation code: |
  # docket_numbers.there_are_any = not dont_know_docket_number
  if dont_know_docket_number:
    docket_numbers[0] = ' '
  docket_numbers.there_is_another = False
---
code: |
  docket_numbers.there_are_any = False
---
question: |
  Attorney Signature
subquestion: |
  Are you completing this form on behalf of yourself or as an attorney
  for someone who is a juvenile (under 18) or incompetent?
field: needs_attorney_signature
buttons:
  - Myself: False
  - As an attorney: True
---
question: |
  What is the address of the attorney signing this form?
fields:
  - Street: signing_attorney.address.address
    address autocomplete: True
  - Unit: signing_attorney.address.unit
    required: False
  - City: signing_attorney.address.city
  - State: signing_attorney.address.state
    code: |
      states_list()
  - Zip: signing_attorney.address.zip
#---
#question: |
#  Date
#subquestion: |
#  What's today's date
#fields:
#  - 'Day': day
#  - 'Month': month
#  - 'Year': year
---
question: |
  Prior Custody Cases
subquestion: |
  Have you ever been part of a custody or other case about the children, 
  as either a witness or a party?
  
  "Other case" includes any custody case, divorce, child support, paternity
  case, visitation case, adoption, juvenile delinquency, DCF case involving
  care and protection. If you're not sure, it's safer to answer yes.
  
  We'll ask you more about any cases on the next screen.
fields:
# TODO: We need to change the list of children to OR instead of AND
  - 'I have been part of another case involving ${comma_and_list(children, and_string=word("or"))}': has_participated_custody_case_yes
    datatype: yesnowide
  - 'I was not part of any other case, but I know about another case involving ${children}': know_of_other_custody_case_yes
    datatype: yesnowide
    show if:
      variable: has_participated_custody_case_yes
      is: False
---
code: |
  has_participated_custody_case = has_participated_custody_case_yes
  has_not_participated_custody_case = not has_participated_custody_case_yes
  if has_participated_custody_case_yes:
    know_of_other_custody_case_yes = True
  know_of_other_custody_case = know_of_other_custody_case_yes
  do_not_know_of_other_custody_case = not know_of_other_custody_case_yes
---
code: |
  other_care_custody_proceedings.there_are_any = has_participated_custody_case_yes or know_of_other_custody_case_yes
---
question: |
  Tell us about the ${ordinal(i)} cases involving ${children}
subquestion: |
  Include all of the information that you know about each case.
fields:  
  - Name of court this case was filed in:  other_care_custody_proceedings[i].court_name
  - Docket number or case number: other_care_custody_proceedings[i].docket_number
    required: False
  - Which children were involved in this case?: other_care_custody_proceedings[i].children
    datatype: object_checkboxes
    choices: |
      children
    show if:
      code: |
        len(children) > 1
  - How were you involved in this case?: other_care_custody_proceedings[i].user_role
    choices:
      - Witness: W
      - Party: P
      - Other: O
      - I was not involved: N
    default: ${'N' if not has_participated_custody_case_yes else ''}
  - Was ${other_parties} part of this case?: other_care_custody_proceedings[i].op_was_party
    datatype: yesnoradio
  - What is the best description of this case: other_care_custody_proceedings[i].case_status
    choices:
      - Adoption (closed): adoption-closed
      - Adoption (pending): adoption-pending
      - Non-adoption case without a final decision yet: pending
      - Custody case that is complete: custody-closed
      - Non-custody case that is complete: non-custody-closed
  - Who was given custody?: other_care_custody_proceedings[i].person_given_custody
    show if:
      variable: other_care_custody_proceedings[i].case_status
      is: "custody-closed"
  - Date custody was given: other_care_custody_proceedings[i].date_of_custody
    datatype: date
    show if:
      variable: other_care_custody_proceedings[i].case_status
      is: "custody-closed"      
  - What happened in this case?: other_care_custody_proceedings[i].what_happened
    show if:
      variable: other_care_custody_proceedings[i].case_status
      is: "non-custody-closed"     
    help: |
      Give a one sentence description.
validation code: |
  # We don't ask the user to select which child is in the case if
  # there is only one child. Below code adds the child to the appropriate
  # list so we can write more general code.
  if len(children) == 1:
    other_care_custody_proceedings[i].children = children
---
question: |
  Other than you or ${other_parties}, was anyone else a party in this case?
yesno: other_care_custody_proceedings[i].other_parties.there_are_any
---
question: |
  Who was involved in this case?
subquestion: |
  Other than yourself or ${other_parties}, who was involved in the custody dispute
  ${other_care_custody_proceedings[i]}?

  List the names of each person who was a party (Plaintiff/Petitioner or Defendant/Respondent)
  OTHER than yourself or ${other_parties}.
list collect: True
fields:
  - A person already mentioned: other_care_custody_proceedings[i].other_parties[j]
    datatype: object
    choices: box8_people
    disable others: True
  - Name: other_care_custody_proceedings[i].other_parties[j].name.first
  - Street address: other_care_custody_proceedings[i].other_parties[j].address.address
    address autocomplete: True
  - Apartment or Unit: other_care_custody_proceedings[i].other_parties[j].address.unit
    required: False
  - City: other_care_custody_proceedings[i].other_parties[j].address.city
  - State: other_care_custody_proceedings[i].other_parties[j].address.state
    code: |
      states_list()      
# We need to add the child_letters for this case to the other_party
#validation code: | 
---
reconsider: True
comment: |
  This builds our list of parties involved in other care/custody proceedings
  for box8. It's also reconsidered on each page load so we can pick from people 
  who were on previous cases on new screens.
code: |
  # It's possible this should be optimized, but I think not unless we had hundreds of cases
  # Start with a set to avoid duplicates
  gathering_temp = set()
  # use .elements to avoid forcing list to be gathered before we work with it here  
  for case in other_care_custody_proceedings.elements:
    if case.other_parties.there_are_any:
      for other_party in case.other_parties.complete_elements():
        gathering_temp.add(other_party)
  box8_people.elements = list(gathering_temp) # I think we need to convert back to a list
  del gathering_temp
# ---
# code: |
#   # This approach is too complex, but maybe worth revisiting
#   # later
#   # Build the attorneys_for_children list
#   gathering_temp = set()
#   for case in other_care_custody_proceedings:
#     for case in 
#     gathering_temp.update(case.attorneys.filter(role="attorney"))
#   # Do we need an appendix for this field?
#   need_attorneys_for_children_appendix = len(gathering_temp) > 3

#   attorneys_for_children.extend(gathering_temp)
#   attorneys_for_children.gathered = True
#   del gathering_temp
# ---
# code: |
#   # Build the gals_investigators list
#   gathering_temp = set()
#   for case in other_care_custody_proceedings:
#     # We need to track the child letter with each GAL/investigator too
#     for person in case.attorneys.filter(role="GAL") + case.attorneys.filter(role="investigator"):
#       if not hasattr(person, 'child_letters'):
#         person.child_letters = set(case.child_letters())
#       else:        
#         person.child_letters.add(case.child_letters())
#     gathering_temp.update(case.attorneys.filter(role="attorney") + case.attorneys.filter(role="investigator"))
#   # Do we need an appendix for this field?
#   need_gals_investigators_appendix = len(gathering_temp) > 3
#   gals_investigators.extend(gathering_temp)
#   gals_investigators.gathered = True  
#   del gathering_temp
---
code: |
  other_care_custody_proceedings[i].other_parties[j].child_letters = other_care_custody_proceedings[i].child_letters()
---
comment: |
  TODO: 
  It is too complex to do this on a case-by-case basis
  given the filtering we need to do/reducing repetition of
  attorney names. But it may be worth it if that UI is better

  Should revisit this later
question: |
  Attorneys for open (pending) cases representing your children
subquestion: |
  You told us about the following pending cases:
  ${other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")}  

  Did any attorney represent either ${comma_and_list(children, and_string=word("or"))}
  for any of the above cases?
yesno: attorneys_for_children.there_are_any
---
question: |
  You told us about the following pending cases:
  ${other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")}  

  Please list each **attorney** involved in any of the above cases who represented
  either ${comma_and_list(children, and_string=word("or"))}

  Click ${word("Add another")} to add another attorney.
list collect: True
fields:
  - Name of attorney: attorneys_for_children[i].name.first
  - Did this attorney represent ALL children?: attorneys_for_children[i].represented_all_children
    datatype: yesnoradio
  - Which children did this attorney represent?: attorneys_for_children[i].represented_children
    datatype: object_checkboxes
    choices: children
    show if:
      variable: attorneys_for_children[i].represented_all_children
      is: False
validation code: |
  if attorneys_for_children[i].represented_all_children:
    attorneys_for_children[i].children = children
---
question: |
  Law guardians and investigators for open (pending) cases representing your children
subquestion: |
  You told us about the following pending cases:
  ${other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")}  

  Did any law guardians (guardians ad litem, or GALs) or investigators work with either ${comma_and_list(children, and_string=word("or"))}
  for any of the above cases?
yesno: gals_investigators.there_are_any
---
question: |
  Law guardians and investigators for open (pending) cases representing your children
subquestion: |
  You told us about the following pending cases:
  ${other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")}  

  Please list each **guardian ad litem** (GAL) and **investigator** involved in any of the above cases who represented
  either ${comma_and_list(children, and_string=word("or"))}

  Click ${word("Add another")} to add another guardian ad litem or investigator.
list collect: True
fields:
  - Name of GAL or investigator: gals_investigators[i].name.first
  - Did this GAL or investigator work with ALL children?: gals_investigators[i].represented_all_children
    datatype: yesnoradio
  - Which children did this GAL or investigator represent?: gals_investigators[i].represented_children
    datatype: object_checkboxes
    choices: children
    show if:
      variable: gals_investigators[i].represented_all_children
      is: False
---
question: |
  Attorneys for open (pending) cases representing either you or ${other_parties}
subquestion: |
  You told us about the following pending cases:
  ${other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")}  

  Did any attorney represent either you or ${other_parties} in 
  any of the above cases? 
yesno: attorneys_for_parents.there_are_any
---
question: |
  Attorneys for open (pending) cases representing you or ${other_parties}
subquestion: |
  You told us about the following pending cases:  
  ${other_care_custody_proceedings.filter(case_status="pending") + other_care_custody_proceedings.filter(case_status="adoption-pending")}  

  Please list each **attorney** involved in any of the above cases who represented
  either you or ${other_parties}.

  Click ${word("Add another")} to add another attorney.
list collect: True
fields:
  - Name of attorney: attorneys_for_parents[i].name.first
  - Who did this attorney represent?: attorneys_for_parents[i].represented_party
    datatype: object_radio
    choices: 
      - users
      - other_parties
---
question: |
  Are there any other cases you would like to tell us about?
subquestion: |
  So far you have told us about ${quantity_noun(len(other_care_custody_proceedings.elements), "case")}: 
  ${comma_and_list(other_care_custody_proceedings.elements)}
yesno: other_care_custody_proceedings.there_is_another
---
code: |
  # Assign each child a letter from A..Z, or even AA..AZ, etc.
  # for someone with more than 26 children
  children[i].letter = number_to_letter(i+1)
---
code: |
  need_past_address_appendix_temp = False
  for child in children:
    if len(child.past_addresses) > 2:
      need_past_address_appendix_temp = True
      break
  need_past_address_appendix = need_past_address_appendix_temp
---
code: |
  need_children_appendix = len(children) > 3
---
progress: 100
mandatory: True
question: |
  Placeholder download screen
subquestion: |
  Placeholder
  
  ### Next steps
  
  1. Step 1
  1. Step 2
  
  Below is a preview of your form.
  
  ${A_affidavit_disclosing_care_or_custody_proceedings0009_attachment }
attachment code: A_affidavit_disclosing_care_or_custody_proceedings0009_attachment
---
need: A_affidavit_disclosing_care_or_custody_proceedings0009
attachment:
    variable name: A_affidavit_disclosing_care_or_custody_proceedings0009_attachment
    name: Affidavit of Care
    filename: Affidavit_of_Care
    editable: False  
    pdf template file: 209A_affidavit_disclosing_care_or_custody_proceedings_remarked.pdf
    fields: 
      - "user_signature": ${ users[0].signature }
---
comment: |
  This question is used to introduce your interview. Please customize
continue button field: A_affidavit_disclosing_care_or_custody_proceedings0009_intro
question: |
  Affidavit Disclosing Care or Custody Proceedings
subquestion: |
  If your children have been involved in court cases about their custody or care, then you must submit an Affidavit Disclosing Care or Custody Proceeding. The main purpose of this form is to find out about any open or closed cases related to the care and/or custody of your children. This helps the court get a better picture of your childrens’ situations.
---
continue button field: A_affidavit_disclosing_care_or_custody_proceedings0009_preview_question
question: |
  Placeholder preview screen
subquestion: |
  Here is a preview of the form you'll sign on the next page. 
     ${A_affidavit_disclosing_care_or_custody_proceedings0009_attachment_preview}
---
attachment:
    variable name: A_affidavit_disclosing_care_or_custody_proceedings0009_attachment_preview
    name: Affidavit of Care
    filename: Affidavit_of_Care
    editable: False    
    pdf template file: 209A_affidavit_disclosing_care_or_custody_proceedings_remarked.pdf
    fields: 
      - "docket_number": ${ docket_numbers[0] }
      - "user_name_full": ${ str(users[0]) }
      - "child1_address_on_one_line": ${ children.item(0).address.on_one_line() if not confidential_address else ''}
      - "child2_address_on_one_line": ${ children.item(1).address.on_one_line()  if not confidential_address else ''}
      - "child3_address_on_one_line": ${ children.item(2).address.on_one_line()  if not confidential_address else ''}
      - "user_address_on_one_line": ${ users[0].address.on_one_line()  if not confidential_address else ''}
      - "user_name_full__1": ${ str(users[0]) }
      - "child1_address_street": ${ children.item(0).address.line_one() }
      - "child1_address_city_state_zip": ${ children.item(0).address.line_two() }
      - "child2_address_street": ${ children.item(1).address.line_one() }
      - "child2_address_city_state_zip": ${ children.item(1).address.line_two() }
      - "child3_address_street": ${ children.item(2).address.line_one() }
      - "child3_address_city_state_zip": ${ children.item(2).address.line_two() }
      - "user_address_on_one_line__2": ${ users[0].address.on_one_line() }
      - "case_name": ${ case_name }
      - "court_division_bmc": ${ showifdef('courts[0].division_bmc') }
      - "court_division_district_court": ${ showifdef('courts[0].division_district_court') }
      - "court_division_juvenile_court": ${ showifdef('courts[0].division_juvenile_court') }
      - "court_division_family_court": ${ showifdef('courts[0].division_family_court') }
      - "court_division_superior_court": ${ showifdef('courts[0].division_superior_court') }
      - "child1_name_last_first": ${ children.item(0).name.lastfirst() }
      - "child2_name_last_first": ${ children.item(1).name.lastfirst() }
      - "child3_name_last_first": ${ children.item(2).name.lastfirst() }
      - "confidential_address": ${ confidential_address }
      - "child1_past_addresses_on_one_line": ${ children.item(0).past_addresses_on_one_line } 
      - "child2_past_addresses_on_one_line": ${ children.item(1).past_addresses_on_one_line }
      - "child3_past_addresses_on_one_line": ${ children.item(2).past_addresses_on_one_line }
      - "has_participated_custody_case": ${ has_participated_custody_case }
      - "has_not_participated_custody_case": ${ not has_participated_custody_case }
      - "know_of_other_custody_case": ${ know_of_other_custody_case }
      - "do_not_know_of_other_custody_case": ${ not know_of_other_custody_case }
      - "other_case_1_user_role": ${other_care_custody_proceedings.item(0).user_role }
      - "other_case_1_letters": ${ other_care_custody_proceedings.item(0).child_letters() }
      - "other_case_1_court": ${ other_care_custody_proceedings.item(0).court_name }
      - "other_case_1_docket": ${ other_care_custody_proceedings.item(0).docket_number }
      - "other_case_1_status": ${ other_care_custody_proceedings.item(0).status() }
      - "other_case_2_user_role": ${ other_care_custody_proceedings.item(1).user_role }
      - "other_case_2_letters": ${ other_care_custody_proceedings.item(1).child_letters() }
      - "other_case_2_court": ${ other_care_custody_proceedings.item(1).court_name }
      - "other_case_2_docket": ${ other_care_custody_proceedings.item(1).docket_number }
      - "other_case_2_status": ${ other_care_custody_proceedings.item(1).status() }
      - "other_case_3_user_role": ${ other_care_custody_proceedings.item(2).user_role }
      - "other_case_3_letters": ${ other_care_custody_proceedings.item(2).child_letters()}
      - "other_case_3_court": ${ other_care_custody_proceedings.item(2).court_name }
      - "other_case_3_docket": ${ other_care_custody_proceedings.item(2).docket_number }
      - "other_case_3_status": ${ other_care_custody_proceedings.item(2).status() }
      - "other_case_other_parties_1_letters": ${ filter_letters(box8_people.item(0).child_letters) }
      - "other_case_other_parties_1_names": ${ box8_people.item(0) }
      - "other_case_other_parties_1_address_on_one_line": ${ box8_people.item(0).address.on_one_line() }
      - "other_case_other_parties_2_letters": ${ filter_letters(box8_people.item(1).child_letters) }
      - "other_case_other_parties_2_names": ${ box8_people.item(1) }
      - "other_case_other_parties_2_address_on_one_line": ${ box8_people.item(1).address.on_one_line() }
      - "other_case_other_parties_3_names": ${ box8_people.item(2) }
      - "other_case_other_parties_3_address_on_one_line": ${ box8_people.item(2).address.on_one_line() }
      - "other_case_other_parties_3_letters": ${ filter_letters(box8_people.item(2).child_letters) }
      - "impound_affidavit": ${ impound_affidavit }
      - "day": ${ day }
      - "month": ${ month }
      - "year": ${ year }
      - "attorney_for_juvenile_address_on_one_line": ${ signing_attorney.address.on_one_line() if needs_attorney_signature else '' }
      - "child1_past_addresses_1": ${ children.item(0).previous_addresses.item(0).on_one_line() }
      - "child1_past_addresses_2": ${ children.item(0).previous_addresses.item(1).on_one_line() }
      - "child2_past_addresses_1": ${ children.item(1).previous_addresses.item(0).on_one_line() }
      - "child2_past_addresses_2": ${ children.item(1).previous_addresses.item(1).on_one_line() }
      - "child3_past_addresses_1": ${ children.item(2).previous_addresses.item(0).on_one_line() }
      - "child3_past_addresses_2": ${ children.item(2).previous_addresses.item(1).on_one_line() }
      - "attorney_for_children_1": |
          ${ str(attorneys_for_children.item(0)) + ' (' + str(attorneys_for_children.item(0).represented_children) + ')' if not attorneys_for_children.item(0).represented_all_children else attorneys_for_children.item(0).represented_children }
      - "attorney_for_children_2": |
          ${ str(attorneys_for_children.item(1)) + ' (' + str(attorneys_for_children.item(1).represented_children) + ')' if not attorneys_for_children.item(1).represented_all_children else attorneys_for_children.item(1).represented_children}
      - "attorney_for_children_3": |
          ${ str(attorneys_for_children.item(2)) + ' (' + str(attorneys_for_children.item(2).represented_children) + ')' if not attorneys_for_children.item(2).represented_all_children else attorneys_for_children.item(2).represented_children}
      - "gals_investigators_1": |
          ${ str(gals_investigators.item(0)) + ' (' + str(gals_investigators.item(0)) + ')' if not gals_investigators.item(0).represented_all_children else gals_investigators.item(0).represented_children}
      - "gals_investigators_2": |
          ${ str(gals_investigators.item(1)) + ' (' + str(gals_investigators.item(1)) + ')' if not gals_investigators.item(1).represented_all_children else gals_investigators.item(1).represented_children}
      - "gals_investigators_3": |
          ${ str(gals_investigators.item(2)) + ' (' + str(gals_investigators.item(2)) + ')' if not gals_investigators.item(2).represented_all_children else gals_investigators.item(2).represented_children}
      - "attorneys_for_parents_1": ${ str(attorneys_for_parents.item(0)) + ' (' + str(attorneys_for_parents.item(0).represented_party) + ')' if defined('attorneys_for_parents[0]') else ''}
      - "attorneys_for_parents_2": ${ str(attorneys_for_parents.item(1)) +  ' (' + str(attorneys_for_parents.item(1).represented_party) + ')' if defined('attorneys_for_parents[1]') else ''}
      - "attorneys_for_parents_3": ${ str(attorneys_for_parents.item(2)) + ' (' + str(attorneys_for_parents.item(2).represented_party) + ')' if defined('attorneys_for_parents[2]') else ''}
