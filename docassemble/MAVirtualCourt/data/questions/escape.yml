comment: |
  Quick exit button for sensitive interviews.
  
  Should be compatible with all browsers, but
  more testing needed
  Browser support:
    https://caniuse.com/#search=createElement
    https://caniuse.com/#search=setAttribute
    https://caniuse.com/#search=appendChild
    https://caniuse.com/#search=getElementById
    https://caniuse.com/#search=childNodes
    Attempt to research inserting in nav bar
    https://caniuse.com/#search=lastChild
    https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild
  
  Note:
    This is run twice on every page.
    `right:` is rightbottom when on mobile.
    Every screen creates two buttons, one for the
    right for desktop and one for the bottom for mobile.
    This runs the code twice, so we need to handle ids
    to make them unique.
---
id: escape_button_and_its_placement
template: escape_button
content: |
  ${ action_button_html("https://docassemble.org", id_tag="escape", classname="escape escape-unhandled", label="Escape", color="danger", size="md") }

  <script>
    // Can't use `let` in here as it exists on the page
    // multiple times. Could put it in a namespace, I
    // suppose.
    // To shorten this code, find a way to access jQuery
    
    var doc = document;  // Need space!

    var outer = outer || doc.createElement( 'div' );
    var inner = inner || doc.createElement( 'div' );
    outer.appendChild( inner );

    outer.setAttribute( 'class', 'escape-outer' );
    inner.setAttribute( 'class', 'escape-inner' );

    // Give a unique id to each escaper so we can add only
    // one per outer/inner pair
    var suffix = suffix || 1;  // Use `suffix` if it already exists
    var unique_id = 'escaper_' + suffix;
    var escaper = doc.getElementById( 'escape' );
    escaper.setAttribute( 'id', unique_id );
    inner.appendChild( escaper );
    
    if (suffix !== 1) {
      escaper.classList.add( 'escape-overlap' );
    }
    
    suffix += 1;
    
    //var one_escape = doc.getElementsByClassName( 'escape-unhandled' )[0];
    //inner.appendChild( one_escape );
    //one_escape.classList = one_escape.classList.replace( 'escape-unhandled', '');
    
    // Add to navbar
    // More supported than getting classes
    var after = doc.getElementById( 'danavbar-collapse' );
    //after.parentNode.insertBefore( escaper, after );
    after.parentNode.insertBefore( inner, after );
    
    
    //var navbar_right = doc.getElementsByClassName( 'damynavbar-right' )[0];
    //navbar_right.insertAfter();
    

    // Add to the navbar
    //var children = doc.getElementById( 'dabody' ).childNodes;
    //for ( child of children ) {
      //if ( child.getAttribute ) {
        //let classes = child.getAttribute('class');
        //let classList = classes.split(' ');
        //if ( classList.indexOf( 'navbar' ) > -1 ) {
          //child.appendChild( outer );
        //}
        //break
      //}  // ends if .getAttribute is defined
    //}  // ends for every child
  </script>
  
  <style>
  
    .escape-inner {
      position: relative;
    }
  
    #escaper_2, .escape-overlap {
      position: absolute;
      top: 0;
      left: 0;
    }
    
    .escape {
      margin: 0;
    }

    /*
    .escape-inner {
      position: relative;
      /*left: -50%;*/
    }
    
    .escape-outer {
      position: absolute;
      left: 50%;
    }
    
    @media screen and (max-width: 30em) { 
      .escape-outer {
        position: absolute;
        left: 55%;
      }
    }
    
    .escape {
      position: relative;
      left: 0;
    }
    */
  </style>
---
default screen parts:
  right: ${ escape_button }
