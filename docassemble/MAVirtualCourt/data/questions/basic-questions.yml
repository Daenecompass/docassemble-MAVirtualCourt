metadata:
  title: |
    MassAccess
  short title: |
    MassAccess
  logo: |
    <img src="/packagestatic/docassemble.MAVirtualCourt/mass_icon.png" class="ma_icon" alt="MA State Icon"><div class="title">MassAccess</div>
---
default screen parts:
  under: |
    Found a bug? Don't close this page! But <a target="_blank" href="https://docs.google.com/forms/d/e/1FAIpQLSeHwCqKxXLJVcmPyUOZceuj2iUTmvOLWIEbAkWxfJVfDHvytA/viewform?usp=sf_link">do fill out this form</a>. Follow its instructions about [this link](${interview_url()}).
---
objects from file:
  - court_emails : court_emails.yml
---
include:
  - form-actions.yml
---
features:
  question help button: True
  progress bar: True
  css: colors.css
---
modules:
  - docassemble.MACourts.macourts
  - .virtual_court_support
---
objects:
  - interview_metadata: DADict.using(object_type=DADict.using(auto_gather=False, gathered=True))
  - users: PeopleList.using(there_are_any=True)
  - children: PeopleList
  - defendants: PeopleList
  - plaintiffs: PeopleList
  - plaintiff: Individual
  - other_parties: PeopleList
  - courts: DAList.using(auto_gather=False, gathered=True, complete_attribute='name') # Normally let's only have one court...
  - macourts: MACourtList.using(courts=['housing_courts','bmc','district_courts','superior_courts','land_court', 'juvenile_courts', 'probate_and_family_courts'])  # this is for lookups
  - witnesses: PeopleList
  - docket_numbers: DAList
  - caregivers: PeopleList
  - guardians_ad_litem: PeopleList
  - attorneys: PeopleList
  - translators: PeopleList
  - debt_collectors: PeopleList
  - creditors: PeopleList
---
comment: |
  Update this if our interview needs to handle more types of people
  This is mostly used for signature flow
  
  You can also add more people in your interview if you need them.
  Use .append() on this list.
  
  TODO: these are actually all lists...
variable name: individuals
data:
  - user
  - other_party
  - plaintiff
  - defendant
  - respondent
  - petitioner
  - spouse
  - children
  - parent
  - guardian
  - caregiver
  - guardian_ad_litem
  - attorney
  - translator
  - witness
  - debt_collector
  - creditor
---
id: who will be on this form
generic object: PeopleList
question: |
  Will this form include any ${noun_plural(x.object_name())}?
yesno: x.there_are_any
---
id: names of witnesses
question: |
  List the name of each witness below
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - First name: witnesses[i].name.first
  - Middle name: witnesses[i].name.middle
  - Last name: witnesses[i].name.last
    required: False
  - Suffix: witnesses[i].name.suffix
    code: |
      name_suffix()
    required: False  
---
id: names of people
generic object: PeopleList
question: |
  Please list all ${x.object_name()} below
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - Is this ${noun_singular(x.object_name())} a person or business?: x[i].person_type
    input type: radio
    choices:
      - Business or organization: business
      - Person: individual
  - First name: x[i].name.first
    show if:
      variable: x[i].person_type
      is: "individual"
  - Last name: x[i].name.last
    show if:
      variable: x[i].person_type      
      is: "individual"
  - Suffix: x[i].name.suffix
    code: |
      name_suffix()
    show if:
      variable: x[i].person_type      
      is: "individual"
    required: False      
  - Name of organization or business: x[i].name.first
    show if:
      variable: x[i].person_type
      is: business
---
id: names of oppposing parties
question: |
  Please list all people on the other side of your case below
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - Is this a person, or a business?: other_parties[i].person_type
    input type: radio
    choices:
      - Business or organization: business
      - Person: individual
  - First name: other_parties[i].name.first
    show if:
      variable: other_parties[i].person_type
      is: "individual"
  - Last name: other_parties[i].name.last
    show if:
      variable: other_parties[i].person_type      
      is: "individual"
  - Suffix: other_parties[i].name.suffix
    code: |
      name_suffix()
    show if:
      variable: other_parties[i].person_type      
      is: "individual"
    required: False      
  - Name of organization or business: other_parties[i].name.first
    show if:
      variable: other_parties[i].person_type
      is: business
---
id: set basic options
mandatory: True
code: |
  # Set some variables that we need in all the interviews
  multi_user = True
  allow_cron = True
  speak_text = True
  # menu_items = [action_menu_item('Review Answers', 'road_map')]
  # menu_items.append( {'url': url_ask(['share_fields', 'share_success', {'recompute': ['share_email','sent_sharing_email','share_cell','sent_sharing_text']}]), 'label': 'Share interview'})
  # menu_items = (action_menu_item('Language','language'))
  set_live_help_status(availability='available', mode='help',partner_roles=['housing','family law'])
---
id: your name
question:  |
  What is your name?
fields:
  - First Name: users[0].name.first
  - Middle Name: users[0].name.middle
    required: False
  - Last Name: users[0].name.last
  - Suffix: users[0].name.suffix
    code: |
      name_suffix()
    required: False  
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  Put in the address that you want filled in on the court form
  next to your name.
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: MA      
  - Zip: users[0].address.zip 
  - Phone number where you can be reached: users[0].phone_number
    required: False
  - Email address where you can be reached: users[0].email    
    datatype: email
    required: False
  - How can we reach you?: users[0].other_contact_method
    input type: area
    js show if: |
      (val("users[0].phone_number") == '' && val("users[0].email") == '') ||
      !(val("users[0].phone_number") || val("users[0].email"))
---
code: |
  users[0].address.geolocate()
  
  #try:
  local_housing_court = macourts.matching_housing_court(users[0].address)
  found_housing_court = local_housing_court
  #except:
  #  local_housing_court = DAEmpty()
  #  found_housing_court = False
---
id: name of person
generic object: Individual
question: |
  What is ${x.object_possessive('name')}?
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
  - Suffix: x.name.suffix
    required: False
---
id: other users
question: |
  Is there anyone else who will be filing this form with you?  
subquestion: |
  % if len(users.elements) <= 1:
  Answer yes if someone else will be a party of the case with you.
  For example, a spouse, partner, or co-tenant who is on your side
  of this case (not the opposing party).
  % else:
  You already told us about ${comma_and_list(users.elements)}
  % endif
yesno: users.there_is_another
---
id: other users names
question: |
  What is the name of the ${ ordinal(i) } person on your side of the case?
fields:
  - First Name: users[i].name.first
  - Middle Name: users[i].name.middle
    required: False
  - Last Name: users[i].name.last
    required: False
  - Suffix: users[i].name.suffix
    required: False
---
id: names of children
question: |
  Tell us about the children who will be on this form
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - First Name: children[i].name.first
  - Middle Name: children[i].name.middle
    required: False
  - Last Name: children[i].name.last
  - Suffix: children[i].name.suffix
    required: False
  - Birthdate: children[i].birthdate
    required: False
---
code: |
  if user_role == 'plaintiff':
    plaintiffs = users
    petitioners = users
    defendants = other_parties
    respondents = other_parties
  elif user_role == 'defendant':
    defendants = users
    respondents = users
    plaintiffs = other_parties
    petitioners = other_parties
  else:
    if user_ask_role == 'plaintiff':
      plaintiffs = users
      petitioners = users
      defendants = other_parties
      respondents = other_parties
    else:
      defendants = users
      respondents = users
      plaintiffs = other_parties
      petitioners = other_parties
  evaluate_role = True
---
id: user role
question: |
  On this form, will you be the person starting a new case or responding to an existing case?
subquestion: |
  If you are starting the case, you may be called either the "Plaintiff"
  or the petitioner, depending on your form.
  
  If you are responding to a case, you may be called either the "Defendant"
  or the "respondent."
field: user_ask_role
buttons:
  - Starting: plaintiff
  - Responding: defendant
---
id: other users there are any
question: |
  Is there anyone on the other side of this case?
subquestion: |
  I.e., the person who you are suing or who is suing you.
yesno: other_parties.there_are_any
---
id: children names without birthdate
question: |
  Tell us about the children who will be on this form
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - First Name: children[i].name.first
  - Middle Name: children[i].name.middle
    required: False
  - Last Name: children[i].name.last
  - Suffix: children[i].name.suffix
    required: False  
---
code: |
  children_parent_question_temp = []
  for child in children:
    pass
#---
#question: |
#  Which children are you the parent of?
#fields:
#  - 
---
id: persons address
generic object: Individual
question: |
  What is ${ x.possessive('address') }?
fields:
  - Street address: x.address.address
    address autocomplete: True
  - Unit: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
    default: MA   
    code: |
      states_list()   
  - Zip: x.address.zip
---
id: persons contact information
generic object: Individual
question: What is the contact information for ${ x.name }?
fields:
  - Phone: x.phone_number
  - Email: x.email
    datatype: email
    required: False
---
id: persons signature
generic object: Individual
question: |
  ${x}, please sign below
signature: x.signature
under: |
  ${x}
progress: 99  
---
if: |
  preferred_court == 'Housing Court'
id: court information
sets:
  - courts[0].name
question: |
  What court is your case being heard in?
subquestion: |
  Your case can be heard in these courts: ${comma_and_list(allowed_courts)}.
  
  % if preferred_court and found_housing_court:
  We have tried to select the court your case is most likely to be in
  below, based on the address you gave us.
  
  We think you are most likely to file in ${local_housing_court}, which
  is at ${local_housing_court.address.on_one_line()}
  
  ${map_of(local_housing_court.address)}
  % else:
  You can try finding your local court by using the [Courthouse Locator](https://www.mass.gov/guides/find-a-courthouse-serving-you). 
  % endif
fields:
  - Court name: courts[0]
    datatype: object
    choices: macourts
    default: local_housing_court
continue button field: ask_court_question    
#help: |
#  % if local_housing_court:
#  ${quote_paragraphs(local_housing_court.description)}
#  % endif
---
id: court information
#sets:
#  - courts[0].name
question: |
  What court is your case being heard in?
subquestion: |
  Your case can be heard in these courts: ${comma_and_list(allowed_courts)}.
  
  % if preferred_court:
  We have tried to select the court your case is most likely to be in
  below, based on the address you gave us.
  
  
  % endif
#fields:
#  - Court name: courts[0]
#    datatype: object
#    choices: macourts
continue button field: ask_court_question    
---
id: docket number
question: |
  What is the docket number for your case?
fields:
  - no label: docket_number
    required: False
continue button field: ask_docket_number
---
id: docket numbers
question: |
  Enter any docket numbers you need on this form below
list collect: True
fields:
  - no label: docket_numbers[i]
    required: False
---
id: signature date
question: |
  When will these forms be signed?
subquestion: |
  Normally, leave this set to today's date.
fields: 
  - Date: signature_date
    datatype: date
    default: ${today().format("yyyy-MM-dd")}
---
id: signature choice
decoration: file-signature
question: |
  Sign your court forms
subquestion: |
  We are almost ready to deliver your forms. You will need to sign them before
  delivering them. You can sign using your computer mouse, or sign on your
  phone with your finger. You can also send the forms to someone else to sign.
field: signature_choice
buttons:  
  - Sign on my phone: phone
    image: mobile-alt
  - Sign on this computer: this device
    image: desktop
continue button field: saw_signature_choice
script: |
  <script>
    $(".da-field-buttons > div > .btn-da-custom").last().after("<br>")
    $(".da-field-buttons > div > .btn-da-custom").first().before("<br>")
  </script>
---
id: signature wait screen
question: |
  % if defined('tenant.signature'):
  Thank you for signing.
  % else:
  Sign on your phone
  % endif
subquestion: |
  % if device().is_pc:
  % if defined('tenant.signature'):
  Click continue.
  % else:
  Click continue on this screen once you have finished signing on your phone.
  % endif
  % else:
  Click continue on this screen when you're ready to sign.
  % endif  
field: signature_wait_screen
decoration: file-signature
---
id: signature-phone
question: |
  Sign your court forms
fields:
  - note: |
      1. Open the camera app or barcode reader app on your phone.
      2. Point it at the screen.
      3. Click the link icon that appears on the camera screen.
      4. Click ${word("continue")} on your phone.
      
      <center>
      ${interview_url_as_qr()}
      </center>
    show if: 
      code: |
        device().is_pc
  - Text me a link instead: text_link
    datatype: yesnowide
    show if: 
      code: |
        device().is_pc
  - label: Cell phone number
    field: link_cell
    show if: text_link
    default: ${showifdef('users[0].phone_number')}
  - note: |
      Click ${word("continue")} to add your signature.
    show if: 
      code: |
        not device().is_pc
help: |
  Many smartphones will automatically find the link on this screen when you use
  the camera app. The link
  may "float" up from the screen into a small icon you can click.
  If your phone does not do this, use the text option instead.
continue button field: saw_signature_qrcode
---
id: signature phone followup
question: |
  Continue on the device you started the interview on
subquestion: |
  Thank you for signing. You can close this browser on your phone.
  Keep going on the computer you started the interview on.
field: signature_phone_followup  
---
template: interview_link
content: |
  Hi, someone sent you a form to sign.
  Click the link below to continue the interview on your phone.
  ${interview_url()}
---
code: |
  started_on_phone = device().is_mobile
---
# Triggers some questions to ask for signatures on either desktop or mobile
# Allows sending via text/email
id: basic questions signature flow control
code: |
  if not defined('signature_fields'):
    # Not a perfect default, but typically only the user needs to sign
    # Make sure signature_fields is defined in a mandatory block
    signature_fields = ['users[0].signature']
  if started_on_phone:
    saw_signature_choice = True
    for signature in signature_fields:
      value(signature)
    # Add in logic for when we need additional signatures
  else: 
    # Three branches:
    # 1. Decided to sign on the PC
    # 2. Sent someone a link to sign the form
    # 3. Used the QR code
    saw_signature_choice

    # Branch 1: PC
    if signature_choice =='this device':
      for signature in signature_fields:
        value(signature)    
    # Check for Branch 2 or 3
    elif signature_choice == 'phone':
      saw_signature_qrcode
      # User will click continue. link_cell will only be defined if they chose the texting option
      if defined('link_cell') and link_cell and task_not_yet_performed('send signature link'): 
        # They used the text option
        send_sms(task='send signature link', to=link_cell,template=interview_link)
        signature_wait_screen
        for signature in signature_fields:
          value(signature)
      else: # Branch 3: They used the QR Code. No special screen, just continue
        for signature in signature_fields:
          value(signature)
      # Show the follow-up either way
      if device().is_mobile:
        #signed = False
        #while not signed:
        #  for signature in signature_fields:
        #    signed = defined(signature) & signed
        signature_phone_followup
  basic_questions_signature_flow = True
---
code: |
  user_signature_verification = users[0].signature
---
question: |
  Mass Access Project
subquestion: |
  This project helps you file emergency forms with the court
  in a time of critical need. At the end, your forms will be
  delivered securely to the court.
  
  The court should contact you in x days to confirm receipt of
  your form. If you don't hear back from them, please call the
  court. You'll get the number for your court at the end of this
  interview.
continue button field: basic_questions_intro_screen
---
code: |
  basic_questions_user_fields = True
---
generic object: Individual
code: |
  x.gender_female = x.gender == 'female'
  x.gender_male = x.gender == 'male'
  x.gender_other = ((x.gender != 'male') and (x.gender != 'female'))
---
generic object: Individual
question: |
  What is ${x.possessive('gender')}?
subquestion: |
  **Note**: Many forms require you to specify a gender of either Male or Female.
  
  If you answer something other than "Female" or "Male", we may not be able
  to check any box on your form.
fields:
  - no label: x.gender
    choices:
      - Female: female
      - Male: male
      - Non-binary: non-binary
      - Prefer not to say: prefer-not-to-say
      - Prefer to write in a different gender: self-described
  - Self-described gender: x.gender
    show if:
      variable: x.gender
      is: "self-described"
---
code: |
  ready_to_email
  email_status
  form_delivery_complete = True
---
code: |
  send_icon = "envelope"
---
code: |
  email_to_use = court_emails.get(courts[0].name,None)
  if not email_to_use:
    found_email = False
  else:
    found_email = True
---
code: |
  email_success = True # until we're ready to turn this on
  sent_email_to_court = True
---
question: |
  Your form is ready to be delivered to ${courts}.
subquestion: |
  % if found_email:
  We will email it to ${email_to_use}
  % else:
  We couldn't locate an email for ${courts}
  % endif
  
  Click continue if you're ready to send it.
continue button field: ready_to_email
---
question: |
  % if email_success:
  Your form was delivered
  % else:
  Something went wrong delivering your form
  % endif
subquestion: |
  % if email_success:
  You should hear back from the court in x days. If you don't hear
  anything, please call the ${courts[0]} at ${courts[0].phone}.
  % else:
  Something went wrong delivering your form to the ${courts[0]}.
  
  You can try emailing your form to ${email_to_use}.
  % endif
continue button field: email_status